"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Game {
  """The game's base36 ID from speedrun.com."""
  id: String!

  """The game's name, in English if possible."""
  name: String!

  """The game's URL slug/abbreviation."""
  slug: String!

  """All of the runs submitted for this game."""
  runs: [Run!]!
}

type Mutation {
  """No-op workaround for https://git.io/JeNXr."""
  noop: Boolean!
}

type Query {
  """Get a game."""
  game(slug: String!): Game!

  """Get a user."""
  user(slug: String!): User!
}

type Run {
  """The run's base36 ID from speedrun.com."""
  id: String!
}

type User {
  """The users's base36 ID from speedrun.com."""
  id: String!

  """The user's URL slug/abbreviation."""
  slug: String!
}
