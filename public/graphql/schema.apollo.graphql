schema {
  query: Speedruns
  mutation: Speedruns
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """
  The variable name to export this field as.
  """
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """
  Specify the store key.
  """
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Category implements Node {
  """
  GraphQL node ID
  """
  id: ID!

  """
  speedrun.com category ID
  """
  srcId: String!

  """
  URL slug used on speedruns.ca
  """
  slug: String!

  """
  URL slug used on speedrun.com
  """
  srcSlug: String!

  """
  name, in English if possible
  """
  name: String!

  """
  leaderboards of ranked runs
  """
  leaderboard(levelSlug: String, includeObsolete: Boolean): [LeaderboardRun!]!

  """
  progress of record over time
  """
  progression(levelSlug: String, includeTies: Boolean): [ProgressionRun!]!
}

type Game implements Node {
  """
  GraphQL node ID
  """
  id: ID!

  """
  speedrun.com game ID
  """
  srcId: String!

  """
  URL slug used on speedruns.ca
  """
  slug: String!

  """
  URL slug used on speedrun.com
  """
  srcSlug: String!

  """
  name, in English if possible
  """
  name: String!

  """
  all runs
  """
  runs: [Run!]!

  """
  full-game run categories
  """
  gameCategories: [Category!]!

  """
  individual level run categories
  """
  levelCategories: [Category!]!

  """
  individual levels
  """
  levels: [Level!]!
}

type LeaderboardRun {
  run: Run!
  rank: Int!
  isTied: Boolean!
  tiedRank: Int!
}

type Level implements Node {
  """
  GraphQL node ID
  """
  id: ID!

  """
  speedrun.com level ID
  """
  srcId: String!

  """
  URL slug used on speedruns.ca
  """
  slug: String!

  """
  URL slug used on speedrun.com
  """
  srcSlug: String!

  """
  name, in English if possible
  """
  name: String!
  categories: [Category!]!

  """
  leaderboards of ranked runs
  """
  leaderboard(
    categorySlug: String
    includeObsolete: Boolean
  ): [LeaderboardRun!]!

  """
  progress of record over time
  """
  progression(categorySlug: String, includeTies: Boolean): [ProgressionRun!]!
}

"""
<https://graphql.org/learn/global-object-identification/>
"""
interface Node {
  """
  GraphQL node ID
  """
  id: ID!
}

type Player {
  name: String!
  user: User
  isGuest: Boolean!
}

type ProgressionRun {
  improvementMs: Int!
  run: Run!
  leaderboardRun: LeaderboardRun
}

type Run implements Node {
  """
  GraphQL node ID
  """
  id: ID!

  """
  speedrun.com level ID
  """
  srcId: String!
  category: Category!
  level: Level
  date: Float
  players: [Player!]!
  timeMs: Int!
}

type Speedruns {
  game(slug: String!): Game
  node(id: ID!): Node
}

type User implements Node {
  """
  GraphQL node ID
  """
  id: ID!

  """
  speedrun.com user ID
  """
  srcId: String!

  """
  URL slug used on speedruns.ca
  """
  slug: String!

  """
  URL slug used on speedrun.com
  """
  srcSlug: String!
}
